#!/usr/bin/env python3
"""
Text-to-Video Generator
Generates videos from text descriptions using OpenAI for analysis and Pexels for video content.
"""

import os
import sys
import json
import requests
import argparse
from pathlib import Path
from typing import List, Dict, Optional
import openai
from moviepy.editor import VideoFileClip, CompositeVideoClip, TextClip, concatenate_videoclips
import tempfile
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TextToVideoGenerator:
    def __init__(self, openai_key: str, pexels_key: str):
        """Initialize the generator with API keys."""
        self.openai_client = openai.OpenAI(api_key=openai_key)
        self.pexels_key = pexels_key
        self.pexels_headers = {
            'Authorization': pexels_key
        }
        self.temp_dir = Path(tempfile.mkdtemp())
        logger.info(f"Temporary directory created: {self.temp_dir}")
    
    def analyze_text_with_openai(self, text: str) -> Dict:
        """Use OpenAI to analyze text and extract video concepts."""
        prompt = f"""
        Analyze the following text and extract key visual concepts, themes, and keywords 
        that would be suitable for finding stock videos. Return a JSON object with:
        - main_theme: primary concept/theme
        - keywords: list of 5-10 search terms for stock videos
        - mood: emotional tone (happy, dramatic, calm, energetic, etc.)
        - scenes: list of 3-5 specific scenes/shots that would illustrate this text
        
        Text to analyze: "{text}"
        
        Return only valid JSON.
        """
        
        try:
            response = self.openai_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=500
            )
            
            analysis = json.loads(response.choices[0].message.content)
            logger.info("Text analysis completed successfully")
            return analysis
        except Exception as e:
            logger.error(f"OpenAI analysis failed: {e}")
            # Fallback analysis
            return {
                "main_theme": "general",
                "keywords": text.split()[:5],
                "mood": "neutral",
                "scenes": [text]
            }
    
    def search_pexels_videos(self, query: str, per_page: int = 5) -> List[Dict]:
        """Search for videos on Pexels."""
        url = "https://api.pexels.com/videos/search"
        params = {
            'query': query,
            'per_page': per_page,
            'orientation': 'landscape'
        }
        
        try:
            response = requests.get(url, headers=self.pexels_headers, params=params)
            response.raise_for_status()
            
            data = response.json()
            videos = []
            
            for video in data.get('videos', []):
                # Get the highest quality video file
                video_files = video.get('video_files', [])
                if video_files:
                    best_quality = max(video_files, key=lambda x: x.get('width', 0))
                    videos.append({
                        'id': video['id'],
                        'url': best_quality['link'],
                        'width': best_quality['width'],
                        'height': best_quality['height'],
                        'duration': video.get('duration', 10)
                    })
            
            logger.info(f"Found {len(videos)} videos for query: {query}")
            return videos
        except Exception as e:
            logger.error(f"Pexels search failed for query '{query}': {e}")
            return []
    
    def download_video(self, video_url: str, filename: str) -> Optional[Path]:
        """Download a video from URL."""
        try:
            response = requests.get(video_url, stream=True)
            response.raise_for_status()
            
            file_path = self.temp_dir / filename
            with open(file_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            logger.info(f"Downloaded video: {filename}")
            return file_path
        except Exception as e:
            logger.error(f"Failed to download video {filename}: {e}")
            return None
    
    def create_video_with_text(self, video_clips: List[Path], text: str, output_path: str, clip_duration: int = 5):
        """Create final video with text overlay."""
        try:
            clips = []
            
            for i, video_path in enumerate(video_clips):
                if not video_path.exists():
                    continue
                
                # Load video clip
                clip = VideoFileClip(str(video_path))
                
                # Trim to desired duration
                if clip.duration > clip_duration:
                    clip = clip.subclip(0, clip_duration)
                
                # Resize to standard resolution
                clip = clip.resize(height=720)
                
                clips.append(clip)
            
            if not clips:
                logger.error("No valid video clips found")
                return False
            
            # Concatenate all clips
            final_video = concatenate_videoclips(clips, method="compose")
            
            # Add text overlay
            text_clip = TextClip(
                text,
                fontsize=50,
                color='white',
                stroke_color='black',
                stroke_width=2,
                size=(final_video.w * 0.8, None),
                method='caption'
            ).set_position('center').set_duration(final_video.duration)
            
            # Composite video with text
            final_video_with_text = CompositeVideoClip([final_video, text_clip])
            
            # Write final video
            final_video_with_text.write_videofile(
                output_path,
                codec='libx264',
                audio_codec='aac',
                fps=24
            )
            
            # Clean up
            for clip in clips:
                clip.close()
            final_video.close()
            final_video_with_text.close()
            
            logger.info(f"Video created successfully: {output_path}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to create video: {e}")
            return False
    
    def generate_video(self, text: str, output_path: str, max_clips: int = 3, clip_duration: int = 5) -> bool:
        """Main method to generate video from text."""
        logger.info(f"Starting video generation for text: {text[:50]}...")
        
        # Analyze text with OpenAI
        analysis = self.analyze_text_with_openai(text)
        logger.info(f"Analysis result: {analysis}")
        
        # Search for videos based on keywords
        all_videos = []
        for keyword in analysis.get('keywords', [])[:3]:  # Limit to first 3 keywords
            videos = self.search_pexels_videos(keyword, per_page=2)
            all_videos.extend(videos)
        
        if not all_videos:
            logger.error("No videos found for the given text")
            return False
        
        # Download top videos
        downloaded_clips = []
        for i, video in enumerate(all_videos[:max_clips]):
            filename = f"clip_{i}_{video['id']}.mp4"
            clip_path = self.download_video(video['url'], filename)
            if clip_path:
                downloaded_clips.append(clip_path)
        
        if not downloaded_clips:
            logger.error("Failed to download any video clips")
            return False
        
        # Create final video
        success = self.create_video_with_text(downloaded_clips, text, output_path, clip_duration)
        
        # Cleanup temporary files
        self.cleanup()
        
        return success
    
    def cleanup(self):
        """Clean up temporary files."""
        try:
            import shutil
            shutil.rmtree(self.temp_dir)
            logger.info("Temporary files cleaned up")
        except Exception as e:
            logger.warning(f"Failed to cleanup temporary files: {e}")

def main():
    parser = argparse.ArgumentParser(description='Generate videos from text using OpenAI and Pexels APIs')
    parser.add_argument('text', help='Text to convert to video')
    parser.add_argument('-o', '--output', default='output_video.mp4', help='Output video file path')
    parser.add_argument('--openai-key', help='OpenAI API key (or set OPENAI_API_KEY env var)')
    parser.add_argument('--pexels-key', help='Pexels API key (or set PEXELS_API_KEY env var)')
    parser.add_argument('--clips', type=int, default=3, help='Maximum number of video clips to use')
    parser.add_argument('--duration', type=int, default=5, help='Duration of each clip in seconds')
    
    args = parser.parse_args()
    
    # Get API keys
    openai_key = args.openai_key or os.getenv('OPENAI_API_KEY')
    pexels_key = args.pexels_key or os.getenv('PEXELS_API_KEY')
    
    if not openai_key:
        logger.error("OpenAI API key is required. Set OPENAI_API_KEY environment variable or use --openai-key")
        sys.exit(1)
    
    if not pexels_key:
        logger.error("Pexels API key is required. Set PEXELS_API_KEY environment variable or use --pexels-key")
        sys.exit(1)
    
    # Generate video
    generator = TextToVideoGenerator(openai_key, pexels_key)
    success = generator.generate_video(args.text, args.output, args.clips, args.duration)
    
    if success:
        print(f"Video generated successfully: {args.output}")
    else:
        print("Failed to generate video")
        sys.exit(1)

if __name__ == "__main__":
    main()
